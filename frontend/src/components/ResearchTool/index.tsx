'use client'
import React, { useState, useRef } from 'react';



const ResearchTool: React.FC = () => {
  const [data, setData] = useState<string>('');
  const [isStreaming, setIsStreaming] = useState<boolean>(false);
  const [issues, setIssues] = useState<string>('');
  const [language, setLanguage] = useState<string>('en-CA'); // Default language is English
  const [model, setmodel] = useState<string>('Google'); // Default model is Google

  const [showSuccessAlert, setShowSuccessAlert] = useState<boolean>(false);

  const dataRef = useRef<HTMLDivElement>(null);

  const handleCopyToClipboard = () => {
    if (dataRef.current) {
      const range = document.createRange();
      range.selectNode(dataRef.current);
      window.getSelection()?.removeAllRanges();
      window.getSelection()?.addRange(range);
      document.execCommand('copy');
      window.getSelection()?.removeAllRanges();
      setShowSuccessAlert(true); // Show success alert
      setTimeout(() => setShowSuccessAlert(false), 3000); // Hide alert after 2 seconds
    }
  };

  const handleButtonClick = () => {
    if (isStreaming) {
      return; // Don't allow starting multiple streams simultaneously
    }

    // Clear existing data when starting a new stream
    setData('');

    const queryParams = new URLSearchParams({
      issues,
      language,
      model
    }).toString();

    const url = `https://app1.rameshkrishna459.workers.dev/Analysis?${queryParams}`;
    
    const source = new EventSource(url);
    setIsStreaming(true);
    let allSources = '<br>All Sources: </br>'; // Initialize a variable to store all sources
    source.onmessage = (event) => {
      console.log(event.data);
      const eventData = JSON.parse(event.data);
      if (eventData.status === 'DONE') {
        // SSE spec says the connection is restarted if we don't explicitly close it
        source.close();
        setIsStreaming(false);
            // Append all sources to prevData after response is completed
        setData((prevData: string) => prevData + allSources);
        return;
      }
      let formattedData = "";


      const formattedSource = eventData.source;
      if (eventData.response){
         formattedData = eventData.response.replaceAll('\n', '<br>').replaceAll('**','');
      }
      if (formattedSource) {
        allSources += formattedSource + '<br>'; // Accumulate sources
      }

      setData((prevData: string) => prevData + formattedData);
    };
  };


  return (
    <section className="relative z-20 overflow-hidden bg-white pb-8 pt-20 dark:bg-dark lg:pb-[50px] lg:pt-[120px]">
      <div className="container">
        <div className="relative overflow-hidden">
    <div className="max-w-4xl mx-auto mt-8 p-6 rounded-lg shadow-lg from-transparent to-gray-100 dark:from-black dark:to-black">
            <h1 className="text-2xl font-bold text-center mb-6">
        Use this tool to Demand MP/MPP to take Action on Health Care
      </h1>
      
      <p className="text-sm text-gray-500 mb-4">
        Disclaimer: The content of the email is generated by AI. Please review before sending to MPs and modify as needed.
      </p>
      <br />
      <label htmlFor="model" className="block text-lg font-semibold mt-4 mb-2 text-balance">
        Select model:
      </label>
      <select
        id="model"
        value={model}
        onChange={(e) => setmodel(e.target.value)}
        className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-gray-200"
      >
        <option value="Google">Google model</option>
        <option value="OpenAI">OpenAI model</option>
      </select>
      <br />
      <br />
      <label htmlFor="issues" className="block text-lg font-semibold mb-2 text-balance">
        Enter your Key Issues With Canadain Health Care System:
      </label>
      <div className="flex flex-wrap gap-2">
        {issues.split(',').map((issue, index) => (
          <div key={index} className="inline-flex items-center px-2 py-1 bg-blue-500 text-white rounded-md text-sm">
            {issue.trim()}
          </div>
        ))}
      </div>
      <input
        type="text"
        id="issues"
        placeholder="Example: Waiting Times, Shortage of Family Doctors, No MRI Machines"
        value={issues}
        onChange={(e) => setIssues(e.target.value)}
        className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm mt-4 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-gray-200"
      />

      <br />
      <label htmlFor="language" className="block text-lg font-semibold mb-2 text-balance">
        Language:
      </label>
      <select
        id="language"
        value={language}
        onChange={(e) => setLanguage(e.target.value)}
        className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-gray-200"
      >
        <option value="English">English</option>
        <option value="French">French</option>
      </select>
      <br />
     <br />
<button
  onClick={handleButtonClick}
  disabled={isStreaming}
  className={`inline-flex items-center px-6 py-3 text-lg font-semibold rounded-md transition duration-300 ${
    isStreaming
      ? 'bg-green-500 cursor-not-allowed text-white dark:text-white-200' // Change color during streaming
      : 'bg-blue-500 hover:bg-blue-700 text-white shadow-md hover:shadow-lg transform hover:scale-105 ease-in-out'
  }`}
>
  {isStreaming ? (
    <>
      <svg
        className="animate-spin h-7 w-7 mr-2"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <circle cx="12" cy="12" r="10" strokeWidth="4" className="opacity-45" />
        <path
          fill="#ffffff"
          d="M14.31 8l-4 4a1.999 1.999 0 0 0 0 2.83l4 4M9.69 16l4-4a1.999 1.999 0 0 0 0-2.83l-4-4"
        />
      </svg>
      <span className="animate-pulse">Composing...</span>
    </>
  ) : (
    'Research'
  )}
</button>



      <br />
      <button
        onClick={() => setData('')}
        className="inline-block bg-red-500 hover:bg-red-700 text-white font-bold py-3 px-6 rounded mt-4 transition-all duration-200 ease-in-out"
      >
        Clear Data
      </button>
      <button
        onClick={handleCopyToClipboard}
        className="inline-block bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded mt-4 transition-all duration-200 ease-in-out"
      >
        Copy AI Generated Research to Clipboard
      </button>
      <div className="mt-6" ref={dataRef} dangerouslySetInnerHTML={{ __html: data }}></div>
      {showSuccessAlert && (
        <div className="bg-green-200 text-green-700 p-2 rounded-md mt-4">
          Data copied to clipboard successfully!
        </div>
      )}
    </div>
    </div>
    </div>
</section>
    
  );
};

export default ResearchTool;